name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type:       github
      name:       statisticsnorway/azure-pipelines-templates
      ref:        refs/heads/java-app-complete-build
      endpoint:   statisticsnorway

# Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

  # usually the same as the maven artifactId
  - name: 'artifactName'
    value: 'dapla-dlp-pseudo-service'
  # The GCR namespace - used to group related container images, e.g. "dapla"
  - name: 'gcrNamespace'
    value: 'dapla'
  # Default git branch can be overridden
  - name: 'defaultBranch'
    value: 'master'
  # See https://hub.docker.com/_/maven
  - name: 'mavenContainer'
    value: 'maven:3.8-openjdk-17'
  # Should the build perform checkstyle analysis? One of [true,false]
  - name: 'checkStyleRunAnalysis'
    value: false
  # Should the build perform PMD analysis? One of [true,false]
  - name: 'pmdRunAnalysis'
    value: true
  # Should the build perform Sonar analysis? One of [true,false]
  - name: 'sonarQubeRunAnalysis'
    value: false
  # The Azure Pipeline Service connection used to connect to SonarCloud.
  # This should typically be something like `bipSonarCloud-<project name>` (e.g. bipSonarCloud-Dapla)
  # See https://docs.bip.ssb.no/develop/code-quality/sonarcloud_ci/#azure-pipelines
  - name: 'sonarCloud'
    value: 'bipSonarCloud-Dapla'

# Job which will run mvn build, mvn install and Sonar Analysis (if branch is master)
jobs:

  - template: java/app-complete-build.yml@templates
    parameters:
      artifactName: dapla-dlp-pseudo-service
      gcrNamespace: dapla
      mavenContainer: maven:3.8-openjdk-17
      checkStyleRunAnalysis: true
      pmdRunAnalysis: true
      sonarQubeRunAnalysis: false
      sonarCloud: bipSonarCloud-Dapla

  - job: buildAndPushDockerImage
    dependsOn: javaAppCompleteBuild
    displayName: 'Build and push docker image'
    steps:

      # Download pipeline artifact
      - download: current
        displayName: 'Download pipeline artifact'
        patterns: |
          **/${{ parameters.artifactName }}-*.jar
          **/logback*.xml
        artifact: target

      #Copy pipeline artifact into working directory
      - bash: |
          ls -latr $(Pipeline.Workspace)/target
          cp -r $(Pipeline.Workspace)/target .
          ls -latr target
        displayName: 'Copy pipeline artifact into working directory'
      #Create image tag
      - bash: |
          BRANCH="$(Build.SourceBranchName)"
          COMMIT_SHA="$(Build.SourceVersion)"
          IMAGE_TAG="${BRANCH}-${COMMIT_SHA:0:8}"
          SCAN_IMAGE_TAG="imagescan-${IMAGE_TAG}"
          echo "Image tag: ${IMAGE_TAG}"
          echo "Scan image tag: ${SCAN_IMAGE_TAG}"
          echo "##vso[task.setvariable variable=image_tag]${IMAGE_TAG}"
          echo "##vso[task.setvariable variable=scan_image_tag]${SCAN_IMAGE_TAG}"
        displayName: 'Create image tag'
        failOnStderr: true
      #Docker build
      - task: Docker@2
        displayName: 'Docker Build'
        inputs:
          repository: 'eu.gcr.io/prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}'
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: $(SCAN_IMAGE_TAG)
      #Docker login
      - task: Docker@2
        displayName: 'Docker login'
        inputs:
          command: 'login'
          containerRegistry: 'gcrServiceConnection'
      #Docker push
      - task: Docker@2
        displayName: 'Docker Push'
        inputs:
          repository: 'prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}'
          command: 'push'
          containerRegistry: 'gcrServiceConnection'
          tags: $(SCAN_IMAGE_TAG)
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        inputs:
          secureFile: 'gcr-key.json'
      - script: |
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Set GCR Key'
      - task: gcr-vulneralbility-check@1
        inputs:
          projectId: 'prod-bip'
          imageHost: 'https://eu.gcr.io/'
          image: 'prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}'
          imageTag: $(SCAN_IMAGE_TAG)
          timeBetweenRetries: '10000'
      - script: |
          set -e
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io/
          docker tag eu.gcr.io/prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}:$(SCAN_IMAGE_TAG) eu.gcr.io/prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}:$(IMAGE_TAG)
          docker push eu.gcr.io/prod-bip/ssb/${{ parameters.gcrNamespace }}/${{ parameters.artifactName }}:$(IMAGE_TAG)
        displayName: 'Retag Image'
        condition: succeeded()