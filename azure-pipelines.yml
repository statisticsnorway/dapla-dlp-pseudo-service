trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: testAndBuild
    displayName: 'Run tests and build artifacts'
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    variables:
      MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
      MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)' 
    steps:

      #Cache maven artifacts  
      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      #Authenticate with maven
      - task: MavenAuthenticate@0
        displayName: 'Authenticate with maven'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'

      #Download java 14
      - bash: |
          echo "Downloading java 14 from https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/openjdk-14.0.1_linux-x64_bin.tar.gz"
          curl https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/openjdk-14.0.1_linux-x64_bin.tar.gz --output $HOME/openjdk-14.0.1_linux-x64_bin.tar.gz          
        displayName: 'Download java 14'

      #Install java 14
      - task: JavaToolInstaller@0
        displayName: 'Install Java 14'
        inputs:
          versionSpec: '14'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'LocalDirectory'
          jdkFile: "$(HOME)/openjdk-14.0.1_linux-x64_bin.tar.gz"
          jdkDestinationDirectory: "$(HOME)/builds/binaries/externals"

      #Build
      - task: Maven@3
        displayName: 'Compile'
        inputs:
           goals: 'compile'
           options: '-P ssb-bip -DskipTests=true -Dmaven.javadoc.skip=true --batch-mode'
           mavenOptions: '$(MAVEN_OPTS)'
      
      #Run tests
      - task: Maven@3
        displayName: 'Test'
        inputs:
           goals: 'verify test'
           options: '-P ssb-bip --batch-mode'
           mavenOptions: '$(MAVEN_OPTS)'

      #Docker login
      - task: Docker@2
        displayName: 'Docker login'
        inputs:
          command: 'login'
          containerRegistry: 'gcrServiceConnection'

      #Docker build and push
      - task: Docker@2
        displayName: 'Build and push Docker image'
        inputs:
          containerRegistry: 'gcrServiceConnection'
          repository: 'prod-bip/ssb/dapla/dapla-dlp-pseudo-service'
          command: 'buildAndPush'
          tags: '$(Build.SourceVersion)'

  - job: promoteToProduction
    displayName: 'Tag production image'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    steps:
      
      # Download GCR credentials
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download GCR credentials'
        inputs:
          secureFile: 'gcr-key.json'
      
      - bash: |
          regex="refs/tags/(.*)"
          [[ $(Build.SourceBranch) =~ $regex ]]
          TAG="${BASH_REMATCH[1]}"
          echo "Tagging image eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$(Build.SourceVersion) with $TAG"
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$(Build.SourceVersion)
          docker tag eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$(Build.SourceVersion) eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$TAG
          docker push eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$TAG
        displayName: 'Tag production image'