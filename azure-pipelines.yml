trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

jobs:

  - job: testAndBuild
    displayName: 'Run tests and build maven artifacts'
    container: maven:3.8.2-openjdk-17
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) # Always, except from when a tag is pushed
    steps:

      #Cache maven artifacts  
      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      #Authenticate with maven
      - task: MavenAuthenticate@0
        displayName: 'Authenticate'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'

      #Test and build
      - task: Maven@3
        displayName: 'Test and build'
        inputs:
          goals: 'verify test'
          options: '-P ssb-bip --batch-mode'
          mavenOptions: '$(MAVEN_OPTS)'

      # Publish pipeline artifact
      - publish: target
        displayName: 'Publish artifact to pipeline'
        artifact: target

  - job: buildAndPushDockerImage
    dependsOn: testAndBuild
    displayName: 'Build and push docker image'
    steps:

      # Download pipeline artifact
      - download: current
        displayName: 'Download pipeline artifact'
        patterns: |
          **/dapla-dlp-pseudo-service-*.jar
          **/logback*.xml
        artifact: target

      #Copy pipeline artifact into working directory
      - bash: |
          ls -latr $(Pipeline.Workspace)/target
          cp -r $(Pipeline.Workspace)/target .
          ls -latr target
        displayName: 'Copy pipeline artifact into working directory'

      #Docker login
      - task: Docker@2
        displayName: 'Docker login'
        inputs:
          command: 'login'
          containerRegistry: 'gcrServiceConnection'

      #Create image tag
      - bash: |
          BRANCH="$(Build.SourceBranchName)"
          COMMIT_SHA="$(Build.SourceVersion)"
          IMAGE_TAG="${BRANCH}-${COMMIT_SHA:0:8}"
          echo "Image tag: ${IMAGE_TAG}"
          echo "##vso[task.setvariable variable=image_tag]${IMAGE_TAG}"
        displayName: 'Create image tag'
        failOnStderr: true

      #Docker build and push
      - task: Docker@2
        displayName: 'Build and push Docker image'
        inputs:
          containerRegistry: 'gcrServiceConnection'
          repository: 'prod-bip/ssb/dapla/dapla-dlp-pseudo-service'
          command: 'buildAndPush'
          tags: '$(IMAGE_TAG)'

  - job: promoteToProduction
    displayName: 'Tag production image'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/') # Whenever a tag is pushed
    steps:

      # Download GCR credentials
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download GCR credentials'
        inputs:
          secureFile: 'gcr-key.json'

      # Tag production image
      - bash: |
          regex="refs/tags/(.*)"
          [[ $(Build.SourceBranch) =~ $regex ]]
          RELEASE_TAG="${BASH_REMATCH[1]}"
          COMMIT_SHA="$(Build.SourceVersion)"
          CURRENT_TAG="master-${COMMIT_SHA:0:8}"
          echo "Tagging image eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$CURRENT_TAG with $RELEASE_TAG"
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$CURRENT_TAG
          docker tag eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$CURRENT_TAG eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$RELEASE_TAG
          docker push eu.gcr.io/prod-bip/ssb/dapla/dapla-dlp-pseudo-service:$RELEASE_TAG
        displayName: 'Tag production image'